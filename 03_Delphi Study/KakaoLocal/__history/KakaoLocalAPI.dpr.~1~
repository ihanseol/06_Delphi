unit KakaoLocalAPI;

interface

uses
  System.SysUtils,
  System.Net.HttpClient,
  System.JSON,
  Clipbrd;

const
  KakaoRestApiKey = 'bb159a41d2eb8d5acb71e0ef1dde4d16';
  KakaoAddressSearchURL = 'https://dapi.kakao.com/v2/local/search/address.json';
  KakaoCoordTransformURL = 'https://dapi.kakao.com/v2/local/geo/transcoord.json';

function ExtractCoordinates(const Data: TJSONArray): TPointF;
function TransformCoordinates(const X, Y: Double): TPointF;
procedure TestAddress;

implementation

function ExtractCoordinates(const Data: TJSONArray): TPointF;
var
  FirstItem: TJSONObject;
  XStr, YStr: string;
begin
  Result := PointF(NaN, NaN);
  if (Data <> nil) and (Data.Count > 0) then
  begin
    FirstItem := Data.Items[0] as TJSONObject;
    if FirstItem <> nil then
    begin
      XStr := FirstItem.GetValue('x').AsString;
      YStr := FirstItem.GetValue('y').AsString;
      if TryStrToFloat(XStr, Result.X) and TryStrToFloat(YStr, Result.Y) then
      begin
        // Successfully extracted coordinates
      end;
    end;
  end;
end;

function TransformCoordinates(const X, Y: Double): TPointF;
var
  Client: TNetHTTPClient;
  Response: IHttpResponse;
  ResponseContent: string;
  JSONObject: TJSONObject;
  DocumentsArray: TJSONArray;
  FirstDocument: TJSONObject;
  TransformedXStr, TransformedYStr: string;
begin
  Result := PointF(NaN, NaN);
  Client := TNetHTTPClient.Create;
  try
    Client.CustomHeaders.Add('Authorization', 'KakaoAK ' + KakaoRestApiKey);
    Response := Client.Get(KakaoCoordTransformURL + Format('?x=%f&y=%f&input_coord=WGS84&output_coord=TM', [X, Y]));
    ResponseContent := Response.ContentAsString();
    JSONObject := TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(ResponseContent)) as TJSONObject;
    if JSONObject <> nil then
    begin
      DocumentsArray := JSONObject.GetValue('documents') as TJSONArray;
      if (DocumentsArray <> nil) and (DocumentsArray.Count > 0) then
      begin
        FirstDocument := DocumentsArray.Items[0] as TJSONObject;
        if FirstDocument <> nil then
        begin
          TransformedXStr := FirstDocument.GetValue('x').AsString;
          TransformedYStr := FirstDocument.GetValue('y').AsString;
          if TryStrToFloat(TransformedXStr, Result.X) and TryStrToFloat(TransformedYStr, Result.Y) then
          begin
            Writeln(Format('x: %s', [TransformedXStr]));
            Writeln(Format('y: %s', [TransformedYStr]));
            Writeln(StringOfChar('-', 100));
            Clipboard.AsText := Format('%s,%s', [TransformedXStr, TransformedYStr]);
            Writeln(Format('%s,%s', [TransformedXStr, TransformedYStr]));
          end;
        end;
      end;
    end;
  finally
    Client.Free;
    JSONObject.Free;
  end;
end;

procedure TestAddress;
var
  Addr: string;
  Params: TStringList;
  Client: TNetHTTPClient;
  Response: IHttpResponse;
  ResponseContent: string;
  JSONObject: TJSONObject;
  DocumentsArray: TJSONArray;
  AddressData, RoadAddress: string;
  Coordinates: TPointF;
begin
  Addr := '충청남도 예산군 대술면 화산리 607-1';
  Params := TStringList.Create;
  Client := TNetHTTPClient.Create;
  try
    Params.Add('query=' + Addr);
    Client.CustomHeaders.Add('Authorization', 'KakaoAK ' + KakaoRestApiKey);
    Response := Client.Get(KakaoAddressSearchURL + '?' + Params.CommaText);
    ResponseContent := Response.ContentAsString(TEncoding.UTF8);
    JSONObject := TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(ResponseContent)) as TJSONObject;
    Writeln(StringOfChar('-', 100));
    Writeln('documents : ', ResponseContent);

    AddressData := '';
    RoadAddress := '';

    DocumentsArray := JSONObject.GetValue('documents') as TJSONArray;
    if (DocumentsArray <> nil) and (DocumentsArray.Count > 0) then
    begin
      if DocumentsArray.Items[0] is TJSONObject then
      begin
        AddressData := (DocumentsArray.Items[0] as TJSONObject).GetValue('address').GetValue('address_name').AsString;
        // if (DocumentsArray.Items[0] as TJSONObject).TryGetValue('road_address') then
        //   RoadAddress := ((DocumentsArray.Items[0] as TJSONObject).GetValue('road_address') as TJSONObject).GetValue('address_name').AsString;
      end;
    end;

    Writeln(StringOfChar('-', 100));
    Writeln(AddressData);
    // Writeln(RoadAddress);
    Writeln(StringOfChar('-', 100));

    // 함수 실행
    Coordinates := ExtractCoordinates(DocumentsArray);
    Writeln(Format('x: %f, y: %f', [Coordinates.X, Coordinates.Y]));

    Writeln(StringOfChar('-', 100));
    TransformCoordinates(Coordinates.X, Coordinates.Y);
    Writeln(StringOfChar('-', 100));

    Readln; // Simulate input('종료하시려면 엔터키를 누르세요 ~ ')
  finally
    Params.Free;
    Client.Free;
    JSONObject.Free;
  end;
end;

end.
